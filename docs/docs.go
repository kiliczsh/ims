// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/audit": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve audit logs with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get audit logs",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by event types",
                        "name": "event_types",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by batch ID",
                        "name": "batch_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by message ID",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by request ID",
                        "name": "request_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by endpoint",
                        "name": "endpoint",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter from date (RFC3339 format)",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter to date (RFC3339 format)",
                        "name": "to_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.AuditLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit/batch/{batch_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all audit logs for a specific batch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get batch audit logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Batch ID",
                        "name": "batch_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.AuditLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit/cleanup": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete audit logs older than specified days",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Cleanup old audit logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of days to keep",
                        "name": "days",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit/message/{message_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all audit logs for a specific message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get message audit logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Message ID",
                        "name": "message_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.AuditLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit/stats": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve statistics about audit logs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "audit"
                ],
                "summary": "Get audit log statistics",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by event types",
                        "name": "event_types",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter from date (RFC3339 format)",
                        "name": "from_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter to date (RFC3339 format)",
                        "name": "to_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.AuditLogStats"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/control": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Start or stop the message scheduler",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scheduler"
                ],
                "summary": "Control Scheduler",
                "parameters": [
                    {
                        "description": "Control action",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ControlRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ControlResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the health status of the service including database, Redis, and scheduler",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    }
                }
            }
        },
        "/messages": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new message that will be queued for sending",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Create Message",
                "parameters": [
                    {
                        "description": "Message details",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/messages/sent": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of successfully sent messages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get Sent Messages",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page size (default: 20, max: 100)",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.SentMessagesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.AuditEventType": {
            "type": "string",
            "enum": [
                "batch_started",
                "batch_completed",
                "batch_failed",
                "message_sent",
                "message_failed",
                "scheduler_started",
                "scheduler_stopped",
                "api_request",
                "webhook_request",
                "webhook_response"
            ],
            "x-enum-varnames": [
                "EventBatchStarted",
                "EventBatchCompleted",
                "EventBatchFailed",
                "EventMessageSent",
                "EventMessageFailed",
                "EventSchedulerStarted",
                "EventSchedulerStopped",
                "EventAPIRequest",
                "EventWebhookRequest",
                "EventWebhookResponse"
            ]
        },
        "domain.AuditLog": {
            "type": "object",
            "properties": {
                "batch_id": {
                    "description": "Context information",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration_ms": {
                    "description": "Metrics",
                    "type": "integer"
                },
                "endpoint": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "event_type": {
                    "$ref": "#/definitions/domain.AuditEventType"
                },
                "failure_count": {
                    "type": "integer"
                },
                "http_method": {
                    "description": "Request/Response details",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer"
                },
                "message_id": {
                    "type": "string"
                },
                "metadata": {
                    "description": "Additional data (JSON)",
                    "type": "object",
                    "additionalProperties": true
                },
                "request_id": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "success_count": {
                    "type": "integer"
                }
            }
        },
        "domain.AuditLogStats": {
            "type": "object",
            "properties": {
                "average_request_duration": {
                    "type": "number"
                },
                "event_type_counts": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "last_event_time": {
                    "type": "string"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "domain.SentMessageResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Hello, this is a test message"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "message_id": {
                    "type": "string",
                    "example": "msg_12345"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "sent_at": {
                    "type": "string",
                    "example": "2023-12-01T10:05:00Z"
                }
            }
        },
        "handlers.ControlRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "\"start\" or \"stop\"",
                    "type": "string",
                    "enum": [
                        "start",
                        "stop"
                    ],
                    "example": "start"
                }
            }
        },
        "handlers.ControlResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Scheduler started successfully"
                },
                "status": {
                    "type": "object",
                    "properties": {
                        "running": {
                            "type": "boolean",
                            "example": true
                        },
                        "started_at": {
                            "type": "string",
                            "example": "2023-12-01T10:00:00Z"
                        }
                    }
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.CreateMessageRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Hello, this is a test message"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                }
            }
        },
        "handlers.CreateMessageResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Hello, this is a test message"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-12-01T10:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "status": {
                    "type": "string",
                    "example": "pending"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid action. Use 'start' or 'stop'"
                }
            }
        },
        "handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "database": {
                    "type": "string",
                    "example": "connected"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "redis": {
                    "type": "string",
                    "example": "connected"
                },
                "scheduler": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-12-01T10:00:00Z"
                }
            }
        },
        "handlers.SentMessagesResponse": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.SentMessageResponse"
                    }
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "page_size": {
                    "type": "integer",
                    "example": 20
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "IMS API",
	Description:      "A message scheduling and sending service with audit logging",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
