# golangci-lint configuration for IMS (Insider Message Sender)
# https://golangci-lint.run/usage/configuration/

linters-settings:
  # Configure specific linters
  govet:
    # Use the shadow analyzer instead of check-shadowing
    enable:
      - shadow

  revive:
    min-confidence: 0

  gocyclo:
    min-complexity: 20

  dupl:
    threshold: 100

  goconst:
    min-len: 2
    min-occurrences: 3

  misspell:
    locale: US

  lll:
    line-length: 150

  goimports:
    local-prefixes: ims

  mnd:
    settings:
      mnd:
        checks:
          - argument
          - case
          - condition
          - operation
          - return
          - assign

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc

  funlen:
    lines: 100
    statements: 50

  gocognit:
    min-complexity: 20

linters:
  # Enable specific linters
  enable:
    - bodyclose
    - dogsled
    - dupl
    - gofmt
    - goprintffuncname
    - gosec
    - gosimple
    - misspell
    - nakedret
    - rowserrcheck
    - staticcheck
    - typecheck
    - unconvert
    - unparam
    - whitespace
    - copyloopvar  # Modern replacement for exportloopref

  # Disable problematic linters for this project
  disable:
    - depguard # blocking legitimate internal imports
    - gochecknoglobals # we use some globals for configuration
    - gocritic # too many style complaints
    - gocyclo # high cyclomatic complexity warnings
    - gochecknoinits # init function usage complaints
    - govet # shadow variable warnings
    - funlen # function length complaints
    - ineffassign # ineffectual assignment warnings
    - stylecheck # style check warnings
    - revive # code style and naming complaints
    - mnd # magic number detection
    - errcheck # unchecked error warnings
    - unused # unused variable/field warnings
    - lll # line length warnings
    - goimports # import formatting complaints
    - goconst # repeated string constant warnings

run:
  # Timeout for analysis
  timeout: 5m

  # Exit code when at least one issue was found
  issues-exit-code: 1

  # Include test files in linting
  tests: true

issues:
  # Skip vendor directory  
  exclude-dirs:
    - vendor
    - bin
    - docs
    - test-results

  # Skip auto-generated files
  exclude-files:
    - ".*\\.pb\\.go$"
    - ".*\\_gen\\.go$"

  # Maximum issues count per one linter
  max-issues-per-linter: 50

  # Maximum count of issues with the same text
  max-same-issues: 10

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - funlen
        - gocognit

    # Exclude known linting issues which we allow in this project
    - text: "weak cryptographic primitive"
      linters:
        - gosec

    # Ignore magic numbers in test files
    - path: _test\.go
      text: "Magic number"
      linters:
        - mnd

    # Ignore long lines in autogenerated files
    - path: ".*\\.pb\\.go"
      linters:
        - lll

  # Use default exclude patterns
  exclude-use-default: true

# Output configuration
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  formats:
    - format: colored-line-number

  # Print lines of code with issue
  print-issued-lines: true

  # Print linter name in the end of issue text
  print-linter-name: true

  # Sort results by: filepath, line and column
  sort-results: true